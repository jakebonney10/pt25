#!/usr/bin/env python
import rospy, math
from sensor_msgs.msg import JointState
from pt25 import pt25

class pt25ros:
    def __init__(self):
        rospy.init_node('pt25')
        self.node_name = rospy.get_name()
        self.get_params()

        self.pt25 = pt25(self.port, self.baudrate)
        self.pt25.get_settings('A')
        self.pt25.get_settings('B')

        self.pt25.set_ccw_limit('A', self.pt25.settings['A']['factory_ccw_limit'])
        self.pt25.set_cw_limit('A', self.pt25.settings['A']['factory_cw_limit'])
        self.pt25.set_ccw_limit('B', self.pt25.settings['B']['factory_ccw_limit'])
        self.pt25.set_cw_limit('B', self.pt25.settings['B']['factory_cw_limit'])

        self.last_pitch_cmd = rospy.Time.from_sec(0.0)
        self.last_roll_cmd = rospy.Time.from_sec(0.0)
        self.min_cmd_duration = rospy.Duration.from_sec(self.min_cmd_delay)

        self.init_subscribers()
        self.init_publishers()

    def get_params(self):
        self.port = rospy.get_param('~port', '/dev/ttyUSB0')
        self.baudrate = int(rospy.get_param('~baudrate', '9600'))
        self.poll_rate = float(rospy.get_param('~poll_rate', '2.0'))
        self.min_cmd_delay = float(rospy.get_param('~min_cmd_delay', '1.0'))
        self.pitch_topic = rospy.get_param('~pitch_topic', 'pt25_pitch')
        self.pitch_cmd_topic = rospy.get_param('~pitch_cmd_topic', 'pt25_pitch_cmd')
        self.pitch_frame = rospy.get_param('~pitch_frame', 'pt25_pitch')
        self.roll_topic = rospy.get_param('~roll_topic', 'pt25_roll')
        self.roll_cmd_topic = rospy.get_param('~roll_cmd_topic', 'pt25_roll_cmd')
        self.roll_frame = rospy.get_param('~roll_frame', 'pt25_roll')

    def init_subscribers(self):
        rospy.Subscriber(self.pitch_cmd_topic, JointState, self.pitch_cmd_cb)
        rospy.Subscriber(self.roll_cmd_topic, JointState, self.roll_cmd_cb)

    def init_publishers(self):
        self.pitch_msg = JointState()
        self.pitch_pub = rospy.Publisher(self.pitch_topic, JointState, queue_size=10)
        self.roll_msg = JointState()
        self.roll_pub = rospy.Publisher(self.roll_topic, JointState, queue_size=10)

    def pitch_cmd_cb(self, msg):
        if msg.header.stamp < self.last_pitch_cmd + self.min_cmd_duration:
            rospy.logwarn('Pitch command too soon after last, ignoring.')
            return
        last_pitch_cmd = msg.header.stamp
        self.pt25.set('B', msg.position[0] * 180. / math.pi)

    def roll_cmd_cb(self, msg):
        if msg.header.stamp < self.last_roll_cmd + self.min_cmd_duration:
            rospy.logwarn('Roll command too soon after last, ignoring.')
            return
        last_roll_cmd = msg.header.stamp
        self.pt25.set('A', msg.position[0] * 180. / math.pi)

    def poll_pitch(self):
        pitch = self.pt25.poll('B')
        if pitch < 0:
            print('Invalid pitch: %.3f' % pitch)
            return
        self.pitch_msg.header.stamp = rospy.Time.now()
        self.pitch_msg.header.frame_id = self.pitch_frame
        self.pitch_msg.name = [self.pitch_frame]
        self.pitch_msg.position = [math.pi * pitch / 180]
        self.pitch_msg.velocity = []
        self.pitch_msg.effort = []
        self.pitch_pub.publish(self.pitch_msg)

    def poll_roll(self):
        roll = self.pt25.poll('A')
        if roll < 0:
            print('Invalid roll: %.3f' % roll)
            return
        self.roll_msg.header.stamp = rospy.Time.now()
        self.roll_msg.header.frame_id = self.roll_frame
        self.roll_msg.name = [self.roll_frame]
        self.roll_msg.position = [math.pi * roll / 180]
        self.roll_msg.velocity = []
        self.roll_msg.effort = []
        self.roll_pub.publish(self.roll_msg)

if __name__ == '__main__':
    pt25rosobj = pt25ros()
    r = rospy.Rate(pt25rosobj.poll_rate)
    while not rospy.is_shutdown():
        pt25rosobj.poll_pitch()
        pt25rosobj.poll_roll()
        r.sleep()
